trigger:
  branches:
    include:
      - development
      - staging
      - master

variables:
  # Version Handling Variables
  majorProductVersion: 1
  minorProductVersion: 1
  majorMinorProductVersion: $(majorProductVersion).$(minorProductVersion)
  patchProductVersion: $[counter(variables['majorMinorProductVersion'],Â 0)]
  buildProductVersion: 0
  projectName: FixIt-Capstone
  feedName: FixitFeed
  apkName: 'fixit'

name: $(majorProductVersion).$(minorProductVersion).$(patchProductVersion).$(buildProductVersion)
stages:
  - stage: DEV
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'), ne(variables['Build.SourceBranch'], 'refs/heads/staging'))
    jobs:
      - job: 'FixitMobileApp_Android_Dev_Build'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          # Installer
          - task: NodeTool@0
            inputs:
              versionSpec: '10.x'
            displayName: 'Install Node.js'

          - task: Npm@1
            displayName: 'Npm install'
            inputs:
              command: 'install'

          # Run Unit Tests
          - task: Npm@1
            displayName: 'Npm test'
            inputs:
              command: 'custom'
              customCommand: 'run test'

          - task: Npm@1
            displayName: 'Npm run coverage'
            inputs:
              command: 'custom'
              customCommand: 'run test:ci'

          # Publish Test Results
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFiles: '**/junit.xml'
              testResultsFormat: 'JUnit'
              testRunTitle: 'Test Results'

          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(Build.Repository.LocalPath)/coverage/cobertura-coverage.xml'
              reportDirectory: '$(Build.Repository.LocalPath)/coverage/'

          # Npm Versioning
          - task: android-manifest-version@1
            displayName: 'Update Android version'
            inputs:
              sourcePath: '$(System.DefaultWorkingDirectory)/android/app/src/main/AndroidManifest.xml'
              versionCodeOption: 'buildid'
              versionCode: '$(Build.BuildId)'
              versionName: '$(majorProductVersion).$(minorProductVersion).$(buildProductVersion)'
              printFile: true

          - task: Gradle@2
            inputs:
              workingDirectory: 'android'
              gradleWrapperFile: 'android/gradlew'
              gradleOptions: '-Xmx3072m'
              publishJUnitResults: false
              testResultsFiles: '**/TEST-*.xml'
              tasks: 'assembledevrelease'
              options: '-PappVersionCode=$(Build.BuildId) -PappVersionName=$(majorProductVersion).$(minorProductVersion).$(buildProductVersion)'

          - task: AndroidSigning@3
            inputs:
              apkFiles: '**/*.apk'
              apksign: true
              apksignerKeystoreFile: 'development-key.keystore'
              apksignerKeystorePassword: '$(keystores-password)'
              apksignerKeystoreAlias: 'devkey-alias'
              apksignerKeyPassword: '$(keystores-password)'
              apksignerArguments: --out $(System.DefaultWorkingDirectory)/android/app/build/outputs/apk/dev/release/$(apkName).dev.release.apk
              zipalign: true

          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)/android/app/build/outputs/apk/dev'
              Contents: '**/*.release.apk'
              TargetFolder: '$(Build.ArtifactStagingDirectory)/android/outputs'

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: apks
              publishLocation: 'container'

      - job: 'FixitMobileApp_IOS_Dev_Build'
        pool:
          vmImage: 'macOS-latest'
        condition: succeeded()
        steps:
          - task: ios-bundle-version@1
            displayName: 'Update iOS version'
            inputs:
              sourcePath: '$(System.DefaultWorkingDirectory)/ios/FixitReactNative/info.plist'
              versionCodeOption: 'buildid'
              versionCode: '$(Build.BuildId)'
              printFile: true

          - task: CocoaPods@0
            inputs:
              forceRepoUpdate: Yes
              projectDirectory: '$(System.DefaultWorkingDirectory)/ios'
              command: pod install

          - task: InstallAppleCertificate@2
            displayName: 'Install Apple Certificate'
            inputs:
              certSecureFile: 'fixit_certificate.p12'
              certPwd: '$(certPwd)'

          - task: InstallAppleProvisioningProfile@1
            displayName: 'Install Apple Provisioning Profile'
            inputs:
              provisioningProfileLocation: 'secureFiles'
              provProfileSecureFile: 'fixit_dev_distribution.mobileprovision'

          - task: Xcode@5
            displayName: 'Xcode Build'
            inputs:
              xcodeVersion: 12
              actions: 'clean build'
              configuration: 'Release'
              sdk: 'iphoneos'
              xcWorkspacePath: '$(System.DefaultWorkingDirectory)/ios/FixitReactNative.xcworkspace'
              scheme: 'FixitReactNative'
              packageApp: true
              exportPath: 'output/'
              signingOption: 'manual'
              signingIdentity: '$(APPLE_CERTIFICATE_SIGNING_IDENTITY)'
              provisioningProfileUuid: '$(APPLE_PROV_PROFILE_UUID)'
              destinationPlatformOption: 'iOS'
              destinationSimulators: 'iPhone 11 Pro'

          - task: CopyFiles@2
            displayName: 'Copy iOS Files To Staging Directory'
            inputs:
              Contents: '**/*.ipa'
              TargetFolder: '$(Build.ArtifactStagingDirectory)/iOS'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish iOS Artifacts'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: '${{ parameters.artifactName }}'

  - stage: STAGE
    dependsOn: []
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/staging'))
    jobs:
      - job: 'FixitMobileApp_Android_Stage_Build'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          # Installer
          - task: NodeTool@0
            inputs:
              versionSpec: '10.x'
            displayName: 'Install Node.js'

          - task: Npm@1
            displayName: 'Npm install'
            inputs:
              command: 'install'

          # Run Unit Tests
          - task: Npm@1
            displayName: 'Npm test'
            inputs:
              command: 'custom'
              customCommand: 'run test'

          - task: Npm@1
            displayName: 'Npm run coverage'
            inputs:
              command: 'custom'
              customCommand: 'run test:ci'

          # Publish Test Results
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFiles: '**/junit.xml'
              testResultsFormat: 'JUnit'
              testRunTitle: 'Test Results'

          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(Build.Repository.LocalPath)/coverage/cobertura-coverage.xml'
              reportDirectory: '$(Build.Repository.LocalPath)/coverage/'

          # Npm Versioning
          - task: android-manifest-version@1
            displayName: 'Update Android version'
            inputs:
              sourcePath: '$(System.DefaultWorkingDirectory)/android/app/src/main/AndroidManifest.xml'
              versionCodeOption: 'buildid'
              versionCode: '$(Build.BuildId)'
              versionName: '$(majorProductVersion).$(minorProductVersion).$(buildProductVersion)'
              printFile: true

          - task: Gradle@2
            inputs:
              workingDirectory: 'android'
              gradleWrapperFile: 'android/gradlew'
              gradleOptions: '-Xmx3072m'
              publishJUnitResults: false
              testResultsFiles: '**/TEST-*.xml'
              tasks: 'assemblestagerelease'
              options: '-PappVersionCode=$(Build.BuildId) -PappVersionName=$(majorProductVersion).$(minorProductVersion).$(buildProductVersion)'

          - task: AndroidSigning@3
            inputs:
              apkFiles: '**/*.apk'
              apksign: true
              apksignerKeystoreFile: 'development-key.keystore'
              apksignerKeystorePassword: '$(keystores-password)'
              apksignerKeystoreAlias: 'devkey-alias'
              apksignerKeyPassword: '$(keystores-password)'
              apksignerArguments: --out $(System.DefaultWorkingDirectory)/android/app/build/outputs/apk/stage/release/$(apkName).stage.release.apk
              zipalign: true

          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)/android/app/build/outputs/apk/stage'
              Contents: '**/*.release.apk'
              TargetFolder: '$(Build.ArtifactStagingDirectory)/android/outputs'

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: apks
              publishLocation: 'container'

      - job: 'FixitMobileApp_IOS_Stage_Build'
        pool:
          vmImage: 'macOS-latest'
        condition: succeeded()
        steps:
          - task: CmdLine@2
            inputs:
              script: echo IOS STAGE BUILD

  - stage: PROD
    dependsOn: []
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - job: 'FixitMobileApp_Android_Prod_Build'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          # Installer
          - task: NodeTool@0
            inputs:
              versionSpec: '10.x'
            displayName: 'Install Node.js'

          - task: Npm@1
            displayName: 'Npm install'
            inputs:
              command: 'install'

          # Run Unit Tests
          - task: Npm@1
            displayName: 'Npm test'
            inputs:
              command: 'custom'
              customCommand: 'run test'

          - task: Npm@1
            displayName: 'Npm run coverage'
            inputs:
              command: 'custom'
              customCommand: 'run test:ci'

          # Publish Test Results
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFiles: '**/junit.xml'
              testResultsFormat: 'JUnit'
              testRunTitle: 'Test Results'

          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(Build.Repository.LocalPath)/coverage/cobertura-coverage.xml'
              reportDirectory: '$(Build.Repository.LocalPath)/coverage/'

          # Npm Versioning
          - task: android-manifest-version@1
            displayName: 'Update Android version'
            inputs:
              sourcePath: '$(System.DefaultWorkingDirectory)/android/app/src/main/AndroidManifest.xml'
              versionCodeOption: 'buildid'
              versionCode: '$(Build.BuildId)'
              versionName: '$(majorProductVersion).$(minorProductVersion).$(patchProductVersion).$(buildProductVersion)'
              printFile: true

          - task: Gradle@2
            inputs:
              workingDirectory: 'android'
              gradleWrapperFile: 'android/gradlew'
              gradleOptions: '-Xmx3072m'
              publishJUnitResults: false
              testResultsFiles: '**/TEST-*.xml'
              tasks: 'assembleprodrelease'
              options: '-PappVersionCode=$(Build.BuildId) -PappVersionName=$(majorProductVersion).$(minorProductVersion).$(patchProductVersion).$(buildProductVersion)'

          - task: AndroidSigning@3
            inputs:
              apkFiles: '**/*.apk'
              apksign: true
              apksignerKeystoreFile: 'development-key.keystore'
              apksignerKeystorePassword: '$(keystores-password)'
              apksignerKeystoreAlias: 'devkey-alias'
              apksignerKeyPassword: '$(keystores-password)'
              apksignerArguments: --out $(System.DefaultWorkingDirectory)/android/app/build/outputs/apk/prod/release/$(apkName).release.apk
              zipalign: true

          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)/android/app/build/outputs/apk/prod'
              Contents: '**/*.release.apk'
              TargetFolder: '$(Build.ArtifactStagingDirectory)/android/outputs'

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: apks
              publishLocation: 'container'

      - job: 'FixitMobileApp_IOS_Prod_Build'
        pool:
          vmImage: 'macOS-latest'
        condition: succeeded()
        steps:
          - task: CmdLine@2
            inputs:
              script: echo IOS PROD BUILD
